version: '3.8'

services:
  # AI Orchestration System
  ai-orchestrator:
    build: .
    ports:
      - "8000:8000"
    environment:
      # Environment
      - ENVIRONMENT=production
      - DEBUG=false
      - LOG_LEVEL=INFO
      
      # API Keys (set these in .env file)
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      
      # Configuration
      - OUTPUT_DIR=/app/output
      - WORKFLOW_CONFIG=/app/workflows/default.yaml
      
      # Git Integration
      - GIT_ENABLED=true
      - GIT_AUTO_COMMIT=true
      - GIT_AUTO_PUSH=false
      - GITHUB_TOKEN=${GITHUB_TOKEN:-}
      
      # Workflow Settings
      - ENABLE_VOTING=true
      - REQUIRE_CONSENSUS=true
      - ALLOW_TIE_BREAKING=true
      - MAX_CONCURRENT_AGENTS=3
      - SESSION_TIMEOUT=3600
      
      # Database (if using external database)
      - DATABASE_URL=${DATABASE_URL:-}
      
    volumes:
      - ./output:/app/output
      - ./logs:/app/logs
      - ai_orchestrator_data:/app/data
    
    restart: unless-stopped
    
    depends_on:
      - redis
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    command: redis-server --appendonly yes
    
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL database (optional, for persistent storage)
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=ai_orchestrator
      - POSTGRES_USER=ai_orchestrator
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-defaultpassword}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    restart: unless-stopped
    
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ai_orchestrator"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx reverse proxy (optional, for production)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - ai-orchestrator
    restart: unless-stopped
    profiles:
      - production

volumes:
  redis_data:
  postgres_data:
  ai_orchestrator_data:

networks:
  default:
    driver: bridge